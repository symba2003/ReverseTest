using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ReverseTest
{
    /// <summary>
    /// Samples from here:
    /// http://www.hanselman.com/blog/FlipTheEndiannessOfALongInC.aspx
    /// 
    /// Task:
    /// Write me a function with this signature in C#:
    /// public (unsafe?) long Reverse(long i, int bits)
    /// ...to flip the endian-ness (LSB/MSB) of a long, but just the # of significant bits specified.
    /// 
    /// Example, if the input is 376, with bits=11, the output is 244 (decimal, base 10).
    /// 376 = 00000101111000
    /// 244 = 00000011110100
    /// 
    /// Example, if the input is 900, with bits=11, the output is 270.
    /// 900 = 00001110000100
    /// 270 = 00000100001110
    /// 
    /// Example, if the input is 900, with bits=12, the output is 540.
    /// 900 = 00001110000100
    /// 540 = 00001000011100
    /// 
    /// Example, if the input is 154, with bits=4, the output is 5.
    /// 154 = 00000010011010
    /// 5   = 00000000000101
    /// And make it FAST...;)
    /// </summary>
    class LongSample
    {
        public static void Run() 
        {
            long l = 3689348814741910323; // 11001100110011001100110011001100110011001100110011001100110011
            long l1 = Reverse_byNicholasAllen(l, 64); // 1111111111111111111111111111111111001100110011001100110011001100
            long l2 = Reverse_byWesnerMoise(l, 64);

            int k = 0;
        }
        public static long Reverse_byNicholasAllen(long i, int bits)
        {
            /** i= 64 63 62 61 60 .... 5 4 3 2 1
             * 1. 0x5555555555555555 = 0101010101010101010101010101010101010101010101010101010101010101
             * (i >> 1) = 0 64 63 62 61 ... 6 5 4 3 2
             *  ((i >> 1) & 0x5555555555555555) = 0 64 0 62 0 60 0 58 ... 6 0 4 0 2
             * i & 0x5555555555555555 = 0 63 0 61 0 59... 5 0 3 0 1
             * ((i & 0x5555555555555555) << 1) = 63 0 61 0 59 0 ...5 0 3 0 1 0
             * ((i >> 1) & 0x5555555555555555) | ((i & 0x5555555555555555) << 1)= 63 64 61 62 59 60 57 58 55 56 53 54 51 52 49 50 47 48 ...27 28 25 26 23 24 21 22 19 20 17 18 15 16 13 14 11 12 9 10 7 8 5 6 3 4 1 2
             * 
             * 2. 0x3333333333333333 = 0011001100110011001100110011001100110011001100110011001100110011
             *    (i >> 2) = 0 0 63 64 61 62 59 60...7 8 5 6 3 4
             *    (i >> 2) & 0x3333333333333333) = 0 0 63 64 0 0 59 60 ... 7 8 0 0 3 4
             *    (i & 0x3333333333333333) = 0 0 61 62 0 0 57 58 ...5 6 0 0 1 2
             *    (i & 0x3333333333333333) << 2 = 61 62 0 0 57 58 0 0 ... 5 6 0 0 1 2 0 0
             *    ((i >> 2) & 0x3333333333333333) | ((i & 0x3333333333333333) << 2) = 61 62 63 64 57 58 59 60 53 54 55 56 49 50 51 52 45 46 47 48  ... 17 18 19 20 13 14 15 16 9 10 11 12 5 6 7 8 1 2 3 4
             *    
             * 3. 0x0F0F0F0F0F0F0F0F = 0000111100001111000011110000111100001111000011110000111100001111
             * (i >> 4) = 0 0 0 0 61 62 63 64 57 58 59 60 .... 5 6 7 8
             * (i >> 4) & 0x0F0F0F0F0F0F0F0F = 0 0 0 0 61 62 63 64 0 0 0 0 53 54 55 56 0 0 0 0 45 46 47 48 .. 0 0 0 0 13 14 15 16 0 0 0 0 5 6 7 8
             * (i & 0x0F0F0F0F0F0F0F0F) = 0 0 0 0 57 58 59 60 0 0 0 0 49 50 51 52... 9 10 11 12 0 0 0 0 1 2 3 4
             * (i & 0x0F0F0F0F0F0F0F0F) << 4 = 57 58 59 60 0 0 0 0 49 50 51 52 ... 17 18 19 20 0 0 0 0 9 10 11 12 0 0 0 0 1 2 3 4 0 0 0 0
             * ((i >> 4) & 0x0F0F0F0F0F0F0F0F) | ((i & 0x0F0F0F0F0F0F0F0F) << 4) = 57 58 59 60 61 62 63 64 49 50 51 52 53 54 55 56 ... 17 18 19 20 21 22 23 24 9 10 11 12 13 14 15 16 1 2 3 4 5 6 7 8
             * 
             * 4. 0x00FF00FF00FF00FF = 0000000011111111000000001111111100000000111111110000000011111111
             *    (i >> 8) = 0 0 0 0 0 0 0 0 57 58 59 60 61 62 63 64 49 50 51 52 53 54 55 56 ... 17 18 19 20 21 22 23 24 9 10 11 12 13 14 15 16
             *    (i >> 8) & 0x00FF00FF00FF00FF) = 0 0 0 0 0 0 0 0 57 58 59 60 61 62 63 64 0 0 0 0 0 0 0 0 ... 25 26 27 28 29 30 31 32 0 0 0 0 0 0 0 0 9 10 11 12 13 14 15 16
             *    (i & 0x00FF00FF00FF00FF) = 0 0 0 0 0 0 0 0 49 50 51 52 53 54 55 56 0 0 0 0 0 0 0 0 ... 17 18 19 20 21 22 23 24 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8
             *    (i & 0x00FF00FF00FF00FF) << 8) = 49 50 51 52 53 54 55 56 0 0 0 0 0 0 0 0 ... 17 18 19 20 21 22 23 24 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 0 0 0 0 0 0 0 0 
             *    ((i >> 8) & 0x00FF00FF00FF00FF) | ((i & 0x00FF00FF00FF00FF) << 8); = 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64... 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
             * ***/
            i = ((i >> 1) & 0x5555555555555555) | ((i & 0x5555555555555555) << 1);
            i = ((i >> 2) & 0x3333333333333333) | ((i & 0x3333333333333333) << 2);
            i = ((i >> 4) & 0x0F0F0F0F0F0F0F0F) | ((i & 0x0F0F0F0F0F0F0F0F) << 4);
            i = ((i >> 8) & 0x00FF00FF00FF00FF) | ((i & 0x00FF00FF00FF00FF) << 8);
            /* 0x0000FFFF0000FFFF = 111111111111111100000000000000001111111111111111
               (i >> 16) = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64... 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
             * (i >> 16) & 0x0000FFFF0000FFFF) = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 ... 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
             * (i & 0x0000FFFF0000FFFF) = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ... 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
             * (i & 0x0000FFFF0000FFFF) << 16 = 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ... 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
             * (i >> 16) & 0x0000FFFF0000FFFF) | ((i & 0x0000FFFF0000FFFF) << 16 = 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
             */
            i = ((i >> 16) & 0x0000FFFF0000FFFF) | ((i & 0x0000FFFF0000FFFF) << 16);
            /*
             (i >> 32) | (i << 32) =  1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64
             */
            i = (i >> 32) | (i << 32);

            // в моем случае: bits = 64 (на все 64 бита сдвигаю)
            return i >> (64 - bits);
        }

        public static long Reverse_byWesnerMoise(long word, int bits)
        {
            // The left shift operator should work the same in C# as in C++.
            // The right shift has two different behavior (arithmetic versus logical shift) depending on whether the type is signed or not.
            // (ulong) >>
            // (long) >>
            // в моем случае: bits = 64 (на все 64 бита сдвигаю)
            ulong n = (ulong)word << (64-bits);
            // n = = 64 63 62 61 60 .... 5 4 3 2 1
            // n >> 32 | n << 32= 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33
            n = n >> 32 | n << 32;
            // 0x0000ffff = 00000000000000001111111111111111
            // Operator precedence: 1) << >> 2) & 3) |
            // n >> 0xf = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48
            //  n << 0xf = 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 64 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33
            //  n >> 0xf & 0x0000ffff = 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 ... 0 0 0 0  0 63 62 61 60 59 58 57 56 55 54 53 52 51 50 49 48
            //  n << 0xf & 0xffff0000 = 
            n = n >> 0xf & 0x0000ffff | n << 0xf & 0xffff0000; // 0xf = 15 = 1111 (а должно быть, наверное 10000 = 16 = 0x10)
            n = n >> 0x8 & 0x00ff00ff | n << 0x8 & 0xff00ff00; // 0x8 = 8 = 1000
            n = n >> 0x4 & 0x0f0f0f0f | n << 0x4 & 0xf0f0f0f0; // 0x4 = 4= 100
            n = n >> 0x2 & 0x33333333 | n << 0x2 & 0xcccccccc;
            n = n >> 0x1 & 0x55555555 | n << 0x1 & 0xaaaaaaaa;
            return (long) n | word & (-1 << bits);

            //ulong n = (ulong)word {{ (64-bits);
            //n = n }} 32 | n {{ 32;
            //n = n }} 0xf & 0x0000ffff | n {{ 0xf & 0xffff0000;
            //n = n }} 0x8 & 0x00ff00ff | n {{ 0x8 & 0xff00ff00;
            //n = n }} 0x4 & 0x0f0f0f0f | n {{ 0x4 & 0xf0f0f0f0;
            //n = n }} 0x2 & 0x33333333 | n {{ 0x2 & 0xcccccccc;
            //n = n }} 0x1 & 0x55555555 | n {{ 0x1 & 0xaaaaaaaa;
            //return (long) n | word & (-1 {{ bits);
        }
    }
}
